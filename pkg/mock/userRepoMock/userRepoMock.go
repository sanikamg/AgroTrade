// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "golang_project_ecommerce/pkg/domain"
	utils "golang_project_ecommerce/pkg/utils"
	req "golang_project_ecommerce/pkg/utils/req"
	res "golang_project_ecommerce/pkg/utils/res"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(c context.Context, address domain.Address) (res.AddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", c, address)
	ret0, _ := ret[0].(res.AddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(c, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), c, address)
}

// Addusers mocks base method.
func (m *MockUserRepository) Addusers(ctx context.Context, user domain.Users) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addusers", ctx, user)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Addusers indicates an expected call of Addusers.
func (mr *MockUserRepositoryMockRecorder) Addusers(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addusers", reflect.TypeOf((*MockUserRepository)(nil).Addusers), ctx, user)
}

// DeleteAddress mocks base method.
func (m *MockUserRepository) DeleteAddress(c context.Context, addressid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", c, addressid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserRepositoryMockRecorder) DeleteAddress(c, addressid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserRepository)(nil).DeleteAddress), c, addressid)
}

// EditAddress mocks base method.
func (m *MockUserRepository) EditAddress(c context.Context, address domain.Address) (res.AddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAddress", c, address)
	ret0, _ := ret[0].(res.AddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditAddress indicates an expected call of EditAddress.
func (mr *MockUserRepositoryMockRecorder) EditAddress(c, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAddress", reflect.TypeOf((*MockUserRepository)(nil).EditAddress), c, address)
}

// EditUserDetails mocks base method.
func (m *MockUserRepository) EditUserDetails(c context.Context, id int, user req.Usereditreq) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserDetails", c, id, user)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUserDetails indicates an expected call of EditUserDetails.
func (mr *MockUserRepositoryMockRecorder) EditUserDetails(c, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserDetails", reflect.TypeOf((*MockUserRepository)(nil).EditUserDetails), c, id, user)
}

// FindAddress mocks base method.
func (m *MockUserRepository) FindAddress(c context.Context, addressid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAddress", c, addressid)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAddress indicates an expected call of FindAddress.
func (mr *MockUserRepositoryMockRecorder) FindAddress(c, addressid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAddress", reflect.TypeOf((*MockUserRepository)(nil).FindAddress), c, addressid)
}

// FindAllProducts mocks base method.
func (m *MockUserRepository) FindAllProducts(c context.Context, categoryid uint) ([]res.AllProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProducts", c, categoryid)
	ret0, _ := ret[0].([]res.AllProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProducts indicates an expected call of FindAllProducts.
func (mr *MockUserRepositoryMockRecorder) FindAllProducts(c, categoryid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockUserRepository)(nil).FindAllProducts), c, categoryid)
}

// FindStatus mocks base method.
func (m *MockUserRepository) FindStatus(c context.Context, phn string) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatus", c, phn)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatus indicates an expected call of FindStatus.
func (mr *MockUserRepositoryMockRecorder) FindStatus(c, phn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatus", reflect.TypeOf((*MockUserRepository)(nil).FindStatus), c, phn)
}

// FindUser mocks base method.
func (m *MockUserRepository) FindUser(ctx context.Context, user domain.Users) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, user)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserRepositoryMockRecorder) FindUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserRepository)(nil).FindUser), ctx, user)
}

// FindUserById mocks base method.
func (m *MockUserRepository) FindUserById(c context.Context, id int) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", c, id)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUserRepositoryMockRecorder) FindUserById(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUserRepository)(nil).FindUserById), c, id)
}

// FindUserByPhn mocks base method.
func (m *MockUserRepository) FindUserByPhn(c context.Context, phn domain.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhn", c, phn)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindUserByPhn indicates an expected call of FindUserByPhn.
func (mr *MockUserRepositoryMockRecorder) FindUserByPhn(c, phn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhn", reflect.TypeOf((*MockUserRepository)(nil).FindUserByPhn), c, phn)
}

// FindUserByPhnNum mocks base method.
func (m *MockUserRepository) FindUserByPhnNum(c context.Context, phn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhnNum", c, phn)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindUserByPhnNum indicates an expected call of FindUserByPhnNum.
func (mr *MockUserRepositoryMockRecorder) FindUserByPhnNum(c, phn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhnNum", reflect.TypeOf((*MockUserRepository)(nil).FindUserByPhnNum), c, phn)
}

// ForgotPassword mocks base method.
func (m *MockUserRepository) ForgotPassword(c context.Context, usrphn, newpass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", c, usrphn, newpass)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserRepositoryMockRecorder) ForgotPassword(c, usrphn, newpass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserRepository)(nil).ForgotPassword), c, usrphn, newpass)
}

// GetCategoryByName mocks base method.
func (m *MockUserRepository) GetCategoryByName(c context.Context, categoryname string) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", c, categoryname)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockUserRepositoryMockRecorder) GetCategoryByName(c, categoryname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockUserRepository)(nil).GetCategoryByName), c, categoryname)
}

// IsEmtyUsername mocks base method.
func (m *MockUserRepository) IsEmtyUsername(c context.Context, username domain.Users) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmtyUsername", c, username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmtyUsername indicates an expected call of IsEmtyUsername.
func (mr *MockUserRepositoryMockRecorder) IsEmtyUsername(c, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmtyUsername", reflect.TypeOf((*MockUserRepository)(nil).IsEmtyUsername), c, username)
}

// ListAddresses mocks base method.
func (m *MockUserRepository) ListAddresses(c context.Context, pagination utils.Pagination, id uint) ([]res.AddressResponse, utils.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddresses", c, pagination, id)
	ret0, _ := ret[0].([]res.AddressResponse)
	ret1, _ := ret[1].(utils.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAddresses indicates an expected call of ListAddresses.
func (mr *MockUserRepositoryMockRecorder) ListAddresses(c, pagination, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddresses", reflect.TypeOf((*MockUserRepository)(nil).ListAddresses), c, pagination, id)
}

// UpdateStatus mocks base method.
func (m *MockUserRepository) UpdateStatus(c context.Context, user domain.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", c, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockUserRepositoryMockRecorder) UpdateStatus(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockUserRepository)(nil).UpdateStatus), c, user)
}

// UpdateUserDetails mocks base method.
func (m *MockUserRepository) UpdateUserDetails(c context.Context, user domain.Users) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", c, user)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockUserRepositoryMockRecorder) UpdateUserDetails(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserDetails), c, user)
}
