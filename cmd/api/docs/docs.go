// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Enter user_name  with password",
                "tags": [
                    "User Login"
                ],
                "summary": "api for user to login",
                "operationId": "UserLogin",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.LoginStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "faild to generat JWT",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/order/create": {
            "post": {
                "description": "Enter address id and method id",
                "tags": [
                    "Create Order"
                ],
                "summary": "api for create order",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "address_id",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "paymentmethod_id",
                        "name": "pagesize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully  created order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "failed to create order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/paymentmethod/add": {
            "post": {
                "description": "Enter payment method and maximum amount",
                "tags": [
                    "payment method"
                ],
                "summary": "api for add payment method by admin",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.PaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully  added payment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "failed to add payment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/paymentmethod/delete": {
            "delete": {
                "description": "Delete payment methods",
                "tags": [
                    "payment method"
                ],
                "summary": "delete paymentmethod",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "id",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully  deleted method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "failed to delete method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/paymentmethod/update": {
            "patch": {
                "description": "Enter payment method and maximum amount with id",
                "tags": [
                    "payment method"
                ],
                "summary": "api for update payment method by admin",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.PaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully  updated payment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "failed to updatepayment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/paymentmethod/view": {
            "get": {
                "description": "Get all products",
                "tags": [
                    "payment method"
                ],
                "summary": "Get all paymentmethods",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page Size",
                        "name": "pagesize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully  displayed all prioducts",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "ferror while getting data",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/signup/": {
            "post": {
                "description": "Enter phone number",
                "tags": [
                    "SignUp For User"
                ],
                "summary": "api for user to send otp to phone",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.Phn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "error while sending otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "otp send successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/signup/register": {
            "post": {
                "description": "Enter user details",
                "tags": [
                    "SignUp For User"
                ],
                "summary": "api for complete registration of user",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Users"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "can't complete registration",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Registration completed please login",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/signup/verify_otp": {
            "post": {
                "description": "Enter otp",
                "tags": [
                    "SignUp For User"
                ],
                "summary": "api for Verify otp of user",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/req.OtpStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "error while verifying otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "otp  successfully verified",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.PaymentMethod": {
            "type": "object",
            "properties": {
                "maximumamount": {
                    "type": "number"
                },
                "method_id": {
                    "type": "integer"
                },
                "paymentmethod": {
                    "type": "string"
                }
            }
        },
        "domain.Users": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phone",
                "username"
            ],
            "properties": {
                "block_status": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 3
                },
                "name": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_Id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 3
                },
                "verification": {
                    "type": "boolean"
                }
            }
        },
        "req.LoginStruct": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 3
                }
            }
        },
        "req.OtpStruct": {
            "type": "object",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "type": "string",
                    "maxLength": 6,
                    "minLength": 6
                }
            }
        },
        "req.Phn": {
            "type": "object",
            "properties": {
                "phone": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "errors": {},
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
